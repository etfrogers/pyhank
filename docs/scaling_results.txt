Total time: 2.26688 s
File: /Users/user/Documents/code/HankelTransform/pyhank/hankel.py
Function: iqdht at line 326

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   326                                               @profile
   327                                               def iqdht(self, fv: np.ndarray,
   328                                                         scaling: HankelTransformMode = HankelTransformMode.UNSCALED) -> np.ndarray:
   329                                                   r"""IQDHT: Inverse Quasi Discrete Hankel Transform
   330
   331                                                   Performs the inverse Hankel transform of a function of frequency, returning
   332                                                   a function of radius.
   333
   334                                                   .. math::
   335                                                       f_r(r) = \mathcal{H}^{-1}\{f_v(v)\}
   336
   337                                                   See :ref:`Scaling <scaling>` above for a description of the effect of ``scaling``
   338
   339                                                   :parameter fv: Function in frequency space (sampled at self.v)
   340                                                   :type fv: :class:`numpy.ndarray`
   341                                                   :parameter scaling: (optional) Parameter to control the scaling of input and output. See
   342                                                       :ref:`Scaling <scaling>` above
   343                                                   :type scaling: :class:`.HankelTransformMode`
   344
   345                                                   :return: Radial function (sampled at self.r) = IHT(fv)
   346                                                   :rtype: :class:`numpy.ndarray`
   347                                                   """
   348       400       2751.0      6.9      0.1          jr, jv = self._get_scaling_factors(fv)
   349
   350       400        830.0      2.1      0.0          if scaling == HankelTransformMode.FR_SCALED:
   351                                                       fr = np.matmul(self.T, (fv / jv))
   352       400        312.0      0.8      0.0          elif scaling == HankelTransformMode.FV_SCALED:
   353       100     565593.0   5655.9     25.0              fr = np.matmul(self.T, fv) * jr
   354       300        220.0      0.7      0.0          elif scaling == HankelTransformMode.UNSCALED:
   355       200    1136135.0   5680.7     50.1              fr = jr * np.matmul(self.T, (fv / jv))
   356       100         74.0      0.7      0.0          elif scaling == HankelTransformMode.BOTH_SCALED:
   357       100     559777.0   5597.8     24.7              fr = np.matmul(self.T, fv)
   358                                                   else:
   359                                                       raise NotImplementedError
   360       400       1190.0      3.0      0.1          return fr

